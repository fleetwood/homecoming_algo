{
	// Place your homecoming_algo workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Getter and setter": {
		"scope": "javascript, typescript",
		"prefix": "getset",
		"body": [
			"get $1 () {",
			"   return this._$1;",
			"}",
			"set $1 ($2) {",
			"   this._$1 = $2;",
			"}"
		],
		"description": "Creates a simple getter/setter."
	},
	"Quick console log": {
		"scope": "javascript, typescript",
		"prefix": "clog",
		"body": "console.log($1)",
		"description": "Quick console log"
	},
	"JSON substring": {
		"scope": "javascript, typescript",
		"prefix": "jstring",
		"body": "JSON.stringify($1, null, 4)"
	},
	"New Promise": {
		"scope": "javascript, typescript",
		"prefix": "newpr",
		"body": [
			"new Promise((resolve, reject) => {",
			"   resolve();",
			"   reject();",
			"});"
		],
		"description": "Create a new promise"
	},
	"New Promise Method": {
		"scope": "javascript, typescript",
		"prefix": "newprmeth",
		"body": [
			"const $1 = () => new Promise((resolve, reject) => {",
			"   resolve();$2",
			"   reject();",
			"});"
		],
		"description": "Create a new async method "
	}
}